import pandas as pd
import numpy as np
from datetime import datetime
import logging

class Backtester:
    def __init__(self, strategy_manager):
        self.strategy_manager = strategy_manager
        self.logger = logging.getLogger(__name__)
        
    def run(self, df, strategy_name, symbol, interval):
        """Backtest çalıştır"""
        try:
            # DataFrame'i kontrol et
            if df.empty:
                raise ValueError("DataFrame boş")
                
            # Stratejiyi al
            strategy = self.strategy_manager.get_strategy(strategy_name)
            if not strategy:
                raise ValueError(f"Strateji bulunamadı: {strategy_name}")
                
            # Stratejiyi çalıştır
            signals = strategy.calculate_signals(df)
            
            # İşlemleri oluştur
            trades = []
            position = None
            
            for i in range(len(signals)):
                timestamp = df.index[i]
                signal = signals[i]
                price = df['close'].iloc[i]
                
                # Alış sinyali
                if signal == 1 and not position:
                    position = {
                        'entry_time': timestamp,
                        'entry_price': price,
                        'type': 'BUY'
                    }
                    trades.append({
                        'timestamp': timestamp,
                        'type': 'BUY',
                        'price': price
                    })
                
                # Satış sinyali
                elif signal == -1 and position:
                    profit = price - position['entry_price']
                    if position['type'] == 'BUY':
                        profit = (price - position['entry_price']) / position['entry_price'] * 100
                    else:
                        profit = (position['entry_price'] - price) / position['entry_price'] * 100
                        
                    trades.append({
                        'timestamp': timestamp,
                        'type': 'SELL',
                        'price': price,
                        'profit': profit
                    })
                    position = None
            
            # Metrikleri hesapla
            metrics = self._calculate_metrics(trades)
            
            return {
                'trades': trades,
                'metrics': metrics
            }
            
        except Exception as e:
            self.logger.error(f"Backtest hatası: {str(e)}")
            return None
            
    def _calculate_metrics(self, trades):
        """Backtest metriklerini hesapla"""
        try:
            if not trades:
                return {
                    'total_trades': 0,
                    'win_rate': 0,
                    'avg_profit': 0,
                    'max_profit': 0,
                    'max_loss': 0,
                    'profit_factor': 0
                }
            
            profits = [t['profit'] for t in trades if 'profit' in t]
            if not profits:
                return {
                    'total_trades': len(trades),
                    'win_rate': 0,
                    'avg_profit': 0,
                    'max_profit': 0,
                    'max_loss': 0,
                    'profit_factor': 0
                }
            
            winning_trades = len([p for p in profits if p > 0])
            
            return {
                'total_trades': len(trades),
                'win_rate': (winning_trades / len(profits)) * 100 if profits else 0,
                'avg_profit': np.mean(profits) if profits else 0,
                'max_profit': max(profits) if profits else 0,
                'max_loss': min(profits) if profits else 0,
                'profit_factor': sum([p for p in profits if p > 0]) / abs(sum([p for p in profits if p < 0])) if profits else 0
            }
            
        except Exception as e:
            self.logger.error(f"Metrik hesaplama hatası: {str(e)}")
            return None
